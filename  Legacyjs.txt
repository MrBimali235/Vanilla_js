const form = document.querySelector(".my-form");
const listBox = document.querySelector(".list-box");
const clear = document.querySelector(".clear-btn");

const currentDate = new Date();

document
  .getElementById("deadline")
  .setAttribute("min", currentDate.toISOString().split("T")[0]);

const handleSubmit = function (e) {
  e.preventDefault();

  const nameInput = document.getElementById("task").value.trim();
  const lettersOnly = /^[A-Za-z]+$/;

  if (!lettersOnly.test(nameInput)) {
    alert("Please enter letters only (no numbers or symbols).");
    e.preventDefault();
    return;
  }

  const deadlineInput = document.getElementById("deadline").value;

  if (!deadlineInput) {
    alert("Please specify a deadline date.");
    return;
  }
  const formData = new FormData(form);
  const task = formData.get("task");
  const deadline = formData.get("deadline");
  let obj = new TODO();
  obj.addList(task, deadline);
};

form.addEventListener("submit", handleSubmit);

class FORM {
  constructor(task, deadline) {
    this.Task = task;
    this.Deadline = deadline;
  }
}

class TODO {
  renderTask(el) {
    currentDate.setHours(0, 0, 0, 0);
    const deadlineDate = new Date(el.Deadline);
    deadlineDate.setHours(0, 0, 0, 0);

    const pastDeadline = deadlineDate < currentDate;
    const statusClass = pastDeadline ? "past-deadline" : "upcoming";

    const html = `
      <div class="task-item">
        <div class="task-left">  
        <input type="checkbox" ${
          pastDeadline ? "disabled" : ""
        }   class="checkbox">
        <p class="task-text ${statusClass}">${el.Task}</p>
        </div>
         <button class="delete-btn" aria-label="Delete task">
    <svg xmlns="http://www.w3.org/2000/svg"
         width="20" height="20"
         viewBox="0 0 24 24"
         fill="none"
         stroke="currentColor"
         stroke-width="2"
         stroke-linecap="round"
         stroke-linejoin="round"
         class="feather feather-trash">
      <polyline points="3 6 5 6 21 6"></polyline>
      <path d="M19 6l-2 14H7L5 6"></path>
      <path d="M10 11v6"></path>
      <path d="M14 11v6"></path>
      <path d="M9 6V4a1 1 0 011-1h4a1 1 0 011 1v2"></path>
    </svg>
  </button>
      </div>
    `;

    listBox.insertAdjacentHTML("afterbegin", html);
  }

  addList(task, deadline) {
    const newTask = new FORM(task, deadline);
    const existingTasks = JSON.parse(localStorage.getItem("tasks")) || [];
    existingTasks.push(newTask);
    localStorage.setItem("tasks", JSON.stringify(existingTasks));
    this.renderTask(newTask);
  }
}

const handleChecks = function (e) {
  if (e.target.classList.contains("checkbox")) {
    const textElement = e.target.nextElementSibling;
    if (textElement) {
      textElement.classList.toggle("checked");
    }
  } else {
    const deleteBtn = e.target.closest(".delete-btn");
    if (deleteBtn) {
      const taskItem = deleteBtn.closest(".task-item");
      if (taskItem) {
        taskItem.remove();
      }
    }
  }
};

listBox.addEventListener("click", handleChecks);

const handleClear = function () {
  while (listBox.firstChild) {
    listBox.removeChild(listBox.firstChild);
  }
};

clear.addEventListener("click", handleClear);

window.addEventListener("DOMContentLoaded", function () {
  const savedTasks = JSON.parse(localStorage.getItem("tasks")) || [];
  const todo = new TODO();
  savedTasks.forEach((task) => {
    todo.renderTask(task);
  });
});
